"""Plot the data.
"""

import json
import matplotlib.pyplot as plt
import matplotlib


def on_clicked(event):
    if event.key == 'x':
        exit()

    if event.key == 's':
        from datetime import datetime
        now = datetime.now()
        current_time = now.strftime('%H-%M-%S')
        plot_name = 'Plot' + "-" + current_time
        plt.title('', loc='left')
        f.savefig('%s.png' % plot_name)
        exit()


def main():
    with open('output.json', 'r') as file:
        data = json.load(file)[1]

    generations = range(len(data))
    objective = data[0][0]['objective']
    objectives = []
    new_objectives = []
    for population in data:
        new_objective = population[0]['objective']
        objectives.append(new_objective)
        if objective < new_objective:
            objective = new_objective
        new_objectives.append(objective)

    # GUI
    plt.rcParams['font.family'] = 'DejaVu Sans'
    plt.rcParams['font.weight'] = '500'
    matplotlib.rcParams['toolbar'] = 'None'
    global f
    f = plt.figure(figsize=(12, 5))
    f.canvas.set_window_title('Genetic Algorithm Demo')
    thismanager = matplotlib.pyplot.get_current_fig_manager()
    thismanager.window.wm_iconbitmap('icon.ico')
    ax = f.add_subplot(111, frameon=True)
    ax.spines['right'].set_visible(False)
    ax.spines['left'].set_visible(False)
    ax.spines['top'].set_visible(False)
    plt.title('Press X to exit\nPress S to save',
              fontsize=14,
              color='#DF6C75',
              loc='left',
              pad=15)
    ax.yaxis.set_label_position('right')
    ax.yaxis.tick_right()
    plt.rcParams['axes.xmargin'] = 0.01
    plt.rcParams['axes.ymargin'] = 0.03
    ax.yaxis.grid(True, linestyle='dashed')
    ax.tick_params(axis='y', which='major', pad=5)
    ax.tick_params(axis='x', which='major', pad=5)
    plt.subplots_adjust(left=0.03, right=0.94, top=0.85, bottom=0.1)

    plt.title('Max: %f Gen: %s' %
              (max(objectives), objectives.index(max(objectives))),
              loc='right',
              fontsize=14,
              color='grey',
              style='italic',
              pad=15)
    ax.yaxis.grid(True)
    ax.plot(generations, new_objectives, linewidth=2)
    ax.plot(generations, objectives)
    plt.connect('key_press_event', on_clicked)
    plt.show()


if __name__ == '__main__':
    main()
