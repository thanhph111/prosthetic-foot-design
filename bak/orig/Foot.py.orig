"""Main script for genetic algorithm and plotting.
You should not modify this.
"""

import os
import random
import subprocess
import matplotlib
import matplotlib.pyplot as plt
from pylab import plot, show, ion
from inputprocess import *

domain = create_domains_list()
chromosome_size = len(domain)
chromosomes = []


class Chromosome():
    """Creating chromosomes for a generation's population."""
    def __init__(self):
        self.value = []
        for index in range(chromosome_size):
            self.value.append(
                random.uniform(domain[index][0], domain[index][1]))
        self.fitness = -1
        self.evaluate = -1


def init_chromosomes():
    global chromosomes
    chromosomes = [Chromosome() for _ in range(POPULATION_SIZE)]


def fitness():
    global chromosomes
    max_fitness = 0.0

    for chromosome in chromosomes:
        output = subprocess.check_output(
            'abaqus cae noGUI=kernel.py -- %s %s' %
            (chromosome.value, 'Model-0-069'),
            shell=True,
            universal_newlines=True)
        chromosome.fitness = float(output)
        if max_fitness < chromosome.fitness:
            max_fitness = chromosome.fitness

    for chromosome in chromosomes:
        chromosome.evaluate = chromosome.fitness / max_fitness * 100
    chromosomes = sorted(chromosomes,
                         key=lambda chromosome: chromosome.evaluate,
                         reverse=True)


def selection():
    global chromosomes
    chromosomes = chromosomes[:int(SELECTION_RATE * len(chromosomes))]


def crossover():
    global chromosomes
    offspring = []
    for _ in range(POPULATION_SIZE - len(chromosomes)):
        child = Chromosome()
        [parent_1, parent_2] = random.choices(
            population=chromosomes,
            weights=[chromosome.evaluate for chromosome in chromosomes],
            k=2)
        genes_of_parent_1 = random.sample(
            range(chromosome_size),
            int(chromosome_size * (parent_1.evaluate /
                                   (parent_1.evaluate + parent_2.evaluate))))
        for i in range(chromosome_size):
            if i in genes_of_parent_1:
                child.value[i] = parent_1.value[i]
            else:
                child.value[i] = parent_2.value[i]
        offspring.append(child)
    chromosomes.extend(offspring)


def mutation():
    mutation_index_list = random.sample(range(POPULATION_SIZE),
                                        int(MUTATION_RATE * POPULATION_SIZE))
    for index in mutation_index_list:
        chromosomes[index].value = [
            random.uniform(domain[i][0], domain[i][1])
            for i in range(chromosome_size)
        ]


def genetic_algorithm(event):
    """Main function for optimization."""
    if event.key == 'x':
        plt.close()
        os._exit(0)
    if event.key != ' ':
        return (0)
    global chromosomes
    chromosomes = []
    generation = 0
    max = 0
    generation_list = []
    max_list = []
    value_list = []
    init_chromosomes()
    fitness()
    while True:
        if max < chromosomes[0].fitness:
            max = chromosomes[0].fitness
            max_gene = generation
        max_list.append(max)
        value_list.append(chromosomes[0].fitness)
        generation_list.append(generation)

        selection()
        crossover()
        mutation()
        fitness()

        ax.clear()
        plt.title('Press Space to start over\nPress X to exit',
                  fontsize=14,
                  color='#DF6C75',
                  loc='left',
                  pad=15)
        plt.title('Max: %.2f Gen: %s' % (max, max_gene),
                  loc='right',
                  fontsize=14,
                  color='grey',
                  style='italic',
                  pad=15)
        ax.yaxis.grid(True)
        ax.plot(generation_list, max_list, linewidth=2)
        ax.plot(generation_list, value_list)
        plt.pause(0.000001)

        generation += 1


def start_again():
    print('ok')
    chromosomes = []
    genetic_algorithm()


if __name__ == '__main__':
    plt.rcParams["font.family"] = "Noto Sans"
    plt.rcParams["font.weight"] = "500"
    matplotlib.rcParams['toolbar'] = 'None'
    f = plt.figure(figsize=(12, 5))
    f.canvas.set_window_title('Genetic Algorithm Demo')
    thismanager = matplotlib.pyplot.get_current_fig_manager()
    thismanager.window.wm_iconbitmap("icon.ico")
    ax = f.add_subplot(111, frameon=True)
    ax.spines['right'].set_visible(False)
    ax.spines['left'].set_visible(False)
    ax.spines['top'].set_visible(False)
    plt.title('Press Space to start over\nPress X to exit',
              fontsize=14,
              color='#DF6C75',
              loc='left',
              pad=15)
    ax.yaxis.set_label_position('right')
    ax.yaxis.tick_right()
    plt.rcParams['axes.xmargin'] = 0.01
    plt.rcParams['axes.ymargin'] = 0.03
    ax.yaxis.grid(True, linestyle='dashed')
    ax.tick_params(axis='y', which='major', pad=5)
    ax.tick_params(axis='x', which='major', pad=5)
    plt.subplots_adjust(left=0.03, right=0.945, top=0.85, bottom=0.1)
    plt.connect('key_press_event', genetic_algorithm)
    plt.show()
